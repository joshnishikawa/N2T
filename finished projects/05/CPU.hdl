// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, the ALU executes the inputted instruction according
 * to the Hack machine language specification, as follows. 
 * The D and A in the language specification refer to CPU-resident registers,
 * while M refers to the memory register addressed by A, i.e. to Memory[A].
 * The inM input holds the value of this register. If the current instruction 
 * needs to write a value to M, the value is placed in outM, the address 
 * of the target register is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset == 1, then the 
 * CPU jumps to address 0 (i.e. sets pc = 0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current program
                         // (reset == 1) or continue executing the current
                         // program (reset == 0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // RAM address (of M)
        pc[15];          // ROM address (of next instruction)

     PARTS:
	//THE CONTROL UNIT ZEROS OUT AN A-INSTRUCTION OR FEEDS A C-INSTRUCTION TO ALL THE APPROPRIATE PLACES
	Mux16(a=false, b=instruction, sel=instruction[15], out[0]=j3, out[1]=j2, out[2]=j1, out[3]=writeM, out[4]=d2, out[5]=d1, out[6]=c6, out[7]=c5, out[8]=c4, out[9]=c3, out[10]=c2, out[11]=c1, out[12]=a);

	//AN A-INSTRUCTION MAKES AN ADDRESS AVAILABLE TO THE AREGISTER
	//A C-INSTRUCTION MAKES THE ALU OUTPUT AVAILABLE TO THE AREGISTER
	Mux16(a=instruction, b=aluout, sel=instruction[15], out=ain);

	//THE AREGISTER SHOULD BE LOADED ANY TIME AN A-INSTRUCTION IS GIVEN *OR* D1 IS TRUE IN A C-INSTRUCTION
	Not(in=instruction[15], out=ainst);
	Or(a=ainst, b=d1, out=loada);

	//THE MEMORY ONLY NEEDS THE 15-BIT ADDRESS, NOT THE MSB INSTRUCTION
	ARegister(in=ain, load=loada, out=aout, out[0..14]=addressM);

	//AT LEAST THESE 3 ARE STRAIGHT FORWARD.
	DRegister(in=aluout, load=d2, out=d);
	Mux16(a=aout, b=inM, sel=a, out=am);
	ALU(x=d, y=am, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=aluout, out=outM, zr=zr, ng=ng);

	//THIS HAIRBALL LOADS THE AREGISTER INTO PC IF ANY JUMP INDICATORS MATCH THE VALUE OF THE ALU OUTPUT
	And(a=ng, b=j1, out=j1ng);
	And(a=zr, b=j2, out=j2zr);
	Or(a=zr, b=ng, out=zrng);
	Not(in=zrng, out=pos);
	And(a=pos, b=j3, out=j3pos);
	Or(a=j1ng, b=j2zr, out=preloadpc);
	Or(a=j3pos, b=preloadpc, out=loadpc);

	//IF THE PC AIN'T BEING LOADED OR RESET, IT BETTER BE INCREMENTING
	Not(in=loadpc, out=incpc);

	//THE 32K ROM ONLY NEEDS THE 15-BIT ADDRESS, NOT THE INSTRUCTION OF THE MSB
	PC(in=aout, load=loadpc, inc=incpc, reset=reset, out[0..14]=pc);

}
